[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: bloop.integrations.sbt.Offloader$$anon$1@3220c28, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/gianc/Desktop/Revature/BigDataRepo/HWRepo/Project0/todocrud/src/main/scala/Main.scala","languageId":"scala","version":1,"text":"import java.sql.DriverManager\r\nimport java.sql.Connection\r\nimport java.util.Scanner\r\nimport java.io.PrintWriter\r\nimport java.io.File\r\nimport java.util.Calendar\r\nimport java.util.InputMismatchException\r\n\r\nobject Main {\r\n  def main(args: Array[String]): Unit = {\r\n    // connect to the database named \"mysql\" on the localhost\r\n    val driver = \"com.mysql.jdbc.Driver\"\r\n    val url =\r\n      \"jdbc:mysql://localhost:3306/todo\" // Modify for whatever port you are running your DB on\r\n    val username = \"root\"\r\n    val password = \"database1234\" // Update to include your password\r\n    var scanner = new Scanner(System.in)\r\n    var connection: Connection = null\r\n    val log = new PrintWriter(new File(\"query.log\"))\r\n    // log.write(Calendar.getInstance().getTimeInMillis + \" - Executing  \\n\")\r\n\r\n    // val addTaskSQL = \"INSERT INTO scala_tasks(task_desc, date) VALUES (\"+ task_desc + \", \" + date + \");\"\r\n\r\n    try {\r\n      // make the connection\r\n      Class.forName(driver)\r\n      connection = DriverManager.getConnection(url, username, password)\r\n      // Terminal run program\r\n      menuchoices()\r\n\r\n//var endprogram = false\r\n//while (!endprogram){\r\n// if (string == add)\r\n  //add\r\n  //if else\r\n    //if else\r\n      //if else\r\n        //if (string == exit)\r\n          //endprogram = true\r\n  //  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      var menuChoice = scanner.nextInt()\r\n      scanner.nextLine()\r\n      println(menuChoice)\r\n      var endProgram = false\r\n      while (!endProgram) {\r\n        menuChoice match {\r\n          case 1 =>\r\n            addtask(connection, scanner, log)\r\n            println(\"Success\")\r\n            menuchoices()\r\n            menuChoice = scanner.nextInt()\r\n            scanner.nextLine()\r\n          case 2 =>\r\n            viewTask(connection, log)\r\n            menuchoices()\r\n            menuChoice = scanner.nextInt()\r\n            scanner.nextLine()\r\n          case 3 =>\r\n            editTask(connection, scanner, log)\r\n            println(\"Success\")\r\n            menuchoices()\r\n            menuChoice = scanner.nextInt()\r\n            scanner.nextLine()\r\n          case 4 =>\r\n            deleteTask(connection, scanner, log)\r\n            println(\"Success\")\r\n            menuchoices()\r\n            menuChoice = scanner.nextInt()\r\n            scanner.nextLine()\r\n          case 5 => endProgram = true\r\n          case _ =>\r\n            println(\"Invalid Choice\")\r\n            println(\"Please choose between 1-5\")\r\n            menuchoices()\r\n            menuChoice = scanner.nextInt()\r\n        }\r\n      }\r\n      println(\"Goodbye\")\r\n      // create the statement, and run the select query\r\n\r\n    } catch {\r\n      case e: Exception => e.printStackTrace\r\n    }\r\n\r\n    connection.close()\r\n    log.close()\r\n  }\r\n\r\n// adds a new task to sql database, uses connection and scanner to receive data to be sent to sql.\r\n\r\n  def addtask(\r\n      connection: Connection,\r\n      scanner: Scanner,\r\n      log: PrintWriter\r\n  ): Unit = {\r\n    println(\"==================================================\")\r\n    val statement = connection.createStatement()\r\n    println(\"Enter the task description\")\r\n    var task_desc = scanner.nextLine()\r\n    task_desc = \"'\" + task_desc + \"'\"\r\n    var task_date = 0\r\n    println(\"Enter the date (MMDDYYYY)\")\r\n    try {\r\n      task_date = scanner.nextInt()\r\n      scanner.nextLine()\r\n    } catch {\r\n      case e: InputMismatchException =>\r\n        println(\"Invalid choice, Enter date in MMDDYY\")\r\n    }\r\n\r\n    val resultSet = statement.executeUpdate(\r\n      s\"INSERT INTO scala_tasks(task_desc, task_date) VALUES ($task_desc, $task_date);\"\r\n    )\r\n    log.write(\r\n      Calendar\r\n        .getInstance()\r\n        .getTimeInMillis + \" - Executing INSERT INTO scala_tasks(task_desc, task_date) VALUES ($task_desc, $task_date); \\n\"\r\n    )\r\n    // Change query to your table\r\n    println(\"==================================================\")\r\n  }\r\n\r\n  //iteratively prints each individual row from SQL table\r\n\r\n  def viewTask(connection: Connection, log: PrintWriter): Unit = {\r\n    val statement = connection.createStatement()\r\n    println(\"==================================================\")\r\n    val resultSet = statement.executeQuery(\"SELECT * FROM scala_tasks;\")\r\n    while (resultSet.next()) {\r\n      print(\r\n        resultSet.getString(1) + \" \" + resultSet.getString(2) + \" \" + resultSet\r\n          .getString(3)\r\n      )\r\n      println()\r\n      log.write(\r\n        Calendar\r\n          .getInstance()\r\n          .getTimeInMillis + \" - Executing SELECT * FROM scala_tasks; \\n\"\r\n      )\r\n    }\r\n    println(\"==================================================\")\r\n  }\r\n\r\n  //allows user to edit the task description of a row, chosen by task ID\r\n  def editTask(\r\n      connection: Connection,\r\n      scanner: Scanner,\r\n      log: PrintWriter\r\n  ): Unit = {\r\n    println(\"==================================================\")\r\n    val statement = connection.createStatement()\r\n    println(\"Which task would you like to edit? (Choose by TASK ID)\")\r\n    var editTask_id = scanner.nextInt()\r\n    scanner.nextLine()\r\n    println(\"What should the new task description be?\")\r\n    var task_desc = scanner.nextLine()\r\n    task_desc = \"'\" + task_desc + \"'\"\r\n    val resultSet = statement.executeUpdate(\r\n      s\"UPDATE scala_tasks SET task_desc = $task_desc  WHERE task_id = $editTask_id; \"\r\n    )\r\n\r\n    log.write(\r\n      Calendar\r\n        .getInstance()\r\n        .getTimeInMillis + \" - Executing UPDATE scala_tasks SET task_desc = $task_desc  WHERE task_id = $editTask_id; \\n\"\r\n    )\r\n    println(\"==================================================\")\r\n  }\r\n\r\n  //allows user to delete the task description of a row, chosen by taskID\r\n  def deleteTask(\r\n      connection: Connection,\r\n      scanner: Scanner,\r\n      log: PrintWriter\r\n  ): Unit = {\r\n    println(\"==================================================\")\r\n    val statement = connection.createStatement()\r\n    println(\"Which task would you like to delete? (Choose by TASK ID)\")\r\n    var deleteTask_id = scanner.nextInt()\r\n    scanner.nextLine()\r\n    val resultSet = statement.executeUpdate(\r\n      s\"DELETE FROM scala_tasks WHERE task_id = $deleteTask_id; \"\r\n    )\r\n    log.write(\r\n      Calendar\r\n        .getInstance()\r\n        .getTimeInMillis + \" - Executing DELETE FROM scala_tasks WHERE task_id = $deleteTask_id; \\n\"\r\n    )\r\n    println(\"==================================================\")\r\n  }\r\n\r\n  def menuchoices(): Unit = {\r\n    println(\"==================================================\")\r\n    println(\"What would you like to do?\")\r\n    println(\"1. Add new task\")\r\n    println(\"2. View existing tasks\")\r\n    println(\"3. Edit task\")\r\n    println(\"4. Delete task\")\r\n    println(\"5. Exit\")\r\n    println(\"==================================================\")\r\n  }\r\n}\r\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Users\gianc\Desktop\Revature\BigDataRepo\HWRepo\Project0\todocrud\target\scala-2.13\zinc\inc_compile_2.13.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Jan 28, 2022, 10:48:55 AM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition json request: {"textDocument":{"uri":"file:///c%3A/Users/gianc/Desktop/Revature/BigDataRepo/HWRepo/Project0/todocrud/src/main/scala/Main.scala"},"position":{"line":68,"character":36}}[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition found line:             editTask(connection, scanner, log)[0m
[0m[[0m[0mdebug[0m] [0m[0msymbol scanner[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition locations Vector()[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition json request: {"textDocument":{"uri":"file:///c%3A/Users/gianc/Desktop/Revature/BigDataRepo/HWRepo/Project0/todocrud/src/main/scala/Main.scala"},"position":{"line":74,"character":35}}[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition found line:             deleteTask(connection, scanner, log)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: $/cancelRequest: JsonRpcNotificationMessage(2.0, $/cancelRequest, {"id":2})[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition json request: {"textDocument":{"uri":"file:///c%3A/Users/gianc/Desktop/Revature/BigDataRepo/HWRepo/Project0/todocrud/src/main/scala/Main.scala"},"position":{"line":74,"character":30}}[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition found line:             deleteTask(connection, scanner, log)[0m
[0m[[0m[0mdebug[0m] [0m[0msymbol scanner[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition locations Vector()[0m
[0m[[0m[0mdebug[0m] [0m[0msymbol connection[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition locations Vector()[0m
